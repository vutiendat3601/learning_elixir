- Interactive shell:
$ iex
$ 1 + 1
$ 2 * (
    3 + 1
  ) / 4
$ 1 + 2; 1 + 3

- Working with variables:
iex> monthly_salary = 10000
iex> monthly_salary
iex> monthly_salary * 12
iex> monthly_salary = 11000
iex> IO.puts("Hello World!")
iex> iex geometry.ex
iex> Geometry.retangle_area(6,7)
iex> -5 |> abs |> Integer.to_string |> IO.puts
iex> IO.puts(Integer.to_string(abs(-5)))
================================================================================
- Type system
  Integer:
iex> 3
  Integer written in HEX:
iex> 0xFF
  Float:
iex> 3.14
  Float, exponential notation
iex> 1.0e-2
  Standard arithmetic operators are supported:
iex> 1 + 2 * 3
iex> div(5,2)
iex> rem(5,2)
iex> 1_000_000
  Atoms(literal named constants):
iex> :an_atom
iex> "an atom with spaces"
iex> AnAtom
iex> true
iex> false
iex> nil
================================================================================
- Tuples (fixed number untyped structure):
iex> me = {"Dat Vu", 22}
iex> name = elem(me, 0)
iex> age = elem(me, 1)
iex> put_elem(me, 1, 23)
================================================================================
- Lists (variable-sized collections of data, singly linked lists):
iex> prime_nums = [1, 2, 3, 5, 7]
iex> length(prime_nums)
iex> Enum.at(prime_nums, 0)
iex> 5 in prime_nums
iex> 4 in prime_nums
iex> List.replace_at(prime_nums, 0, 11)
iex> List.insert_at(prime_nums, 4, 1)
iex> List.insert_at(prime_nums, -1, 1)
iex> [1,2,3] ++ [4,5]
iex> [1 | []]
iex> [1 | [2 | []]]
iex> [1 | [2, 3, 4]]
iex> hd([1, 2, 3, 4])
iex> tl([1, 2, 3, 4])
iex> [11 | prime_nums]
================================================================================
- Maps (key-value store):
iex> dat_vu = %{:name => "Vu Tien Dat", :phone => "0898993601", :email => "vutien.dat.3601@gmail.com"}
iex> dat_vu = %{name: "Vu Tien Dat", phone: "0898993601", email: "vutien.dat.3601@gmail.com"}
iex> dat_vu.name
iex> dat_vu[:name]
iex> dat_vu = %{"name" => "Vu Tien Dat", "phone" => "0898993601", "email" => "vutien.dat.3601@gmail.com"}
iex> dat_vu["name"]
iex> dat_vu = %{name: "Vu Tien Dat", phone: "0898993601", email: "vutien.dat.3601@gmail.com"}
iex> dat_vu = %{dat_vu | :phone => "0388093601"}
iex> Map.put(dat_vu, :birthday, "2001-06-03")
iex> Enum.each(dat_vu, fn attr -> attr_name = elem(attr, 0)
     attr_val = elem(attr, 1)
     IO.puts "#{attr_name} => #{attr_val}"
     end)
================================================================================
- Strings (binary string):
iex> "This is a string"
iex> "Embedded expression: #{3 + 0.14}"
iex> "\r \n \" \\"
iex> "
      This is
      a multiline string
     "
iex> ~s(This is also a string)
iex> ~s(Not interpolated #{3 + 0.14})
iex> ~S(Not interpolated #{3 + 0.14})
iex> "String" <> " " <> "concatenation"
- Character lists:
iex> 'ABC'
iex> ~c"ABC"
iex> ~c(Character list sigil)
iex> ~C(Unescaped sigil #{3 + 0.14})
iex> String.to_charlist("ABC")
================================================================================
- First-class function:
iex> square = fn(x) -> x * x end
iex> square.(5)
iex> print_element = fn(x) -> IO.puts(x) end
iex> Enum.each([1, 2, 3], print_element)
iex> Enum.each([1, 2, 3], &IO.puts/1)
iex> lambda = &(&1 * &2 + &3)
iex> lambda.(2, 3, 4)
- Closure
iex> outside_var = 5
iex> lambda = fn -> IO.puts(outside_var) end
iex> lambda.()
iex> outside_var = 6
iex> lambda.()
================================================================================
- Range:
iex> range = 1..100
iex> 2 in range
iex> 101 in range
iex> Enum.each(1..100, &IO.puts/1)
- Keyword list:
iex> days = [{:monday, 1}, {:tuesday, 2}, {:wednesday, 3}]
iex> days = [monday: 1, tuesday: 2, wednesday: 3]
iex> Keyword.get(days, :monday)
iex> days[:tuesday]
iex> Float.to_string(1/3, [decimals: 2])
- MapSet:
iex> set = MapSet.new([1,2,3,4,5])
iex> MapSet.member?(set, 1)
iex> MapSet.member?(set, 100)
iex> set = MapSet.put(set, 100)
iex> Enum.each(set, &IO.puts/1)
================================================================================
- Dynamically calling functions:
iex> apply(IO, :puts, ["Dynamically function call."])
